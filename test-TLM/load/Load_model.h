/* Simulation code for Load generated by the OpenModelica Compiler OpenModelica 1.12.0~3-g9389f90. */
#if !defined(Load__MODEL_H)
#define Load__MODEL_H
#include "openmodelica.h"
#include "openmodelica_func.h"
#include "simulation_data.h"
#include "simulation/simulation_info_json.h"
#include "simulation/simulation_runtime.h"
#include "util/omc_error.h"
#include "simulation/solver/model_help.h"
#include "simulation/solver/delay.h"
#include "simulation/solver/linearSystem.h"
#include "simulation/solver/nonlinearSystem.h"
#include "simulation/solver/mixedSystem.h"

#include <string.h>

#include "Load_functions.h"

#define TLM_TLM__Functions_TLMGetDelay_index 0
#define TLM_TLM__Functions_TLMGetForce1D_index 1
#define TLM_TLM__Functions_TLMSetDebugMode_index 2
#define TLM_TLM__Functions_TLMPlugin_constructor_index 3
#define TLM_TLM__Functions_TLMPlugin_destructor_index 4

extern void Load_callExternalObjectDestructors(DATA *_data, threadData_t *threadData);
#if !defined(OMC_NUM_NONLINEAR_SYSTEMS) || OMC_NUM_NONLINEAR_SYSTEMS>0
#endif
#if !defined(OMC_NUM_LINEAR_SYSTEMS) || OMC_NUM_LINEAR_SYSTEMS>0
#endif
#if !defined(OMC_NUM_MIXED_SYSTEMS) || OMC_NUM_MIXED_SYSTEMS>0
#endif
#if !defined(OMC_NO_STATESELECTION)
extern void Load_initializeStateSets(int nStateSets, STATE_SET_DATA* statesetData, DATA *data);
#endif
extern int Load_functionAlgebraics(DATA *data, threadData_t *threadData);
extern int Load_function_storeDelayed(DATA *data, threadData_t *threadData);
extern int Load_updateBoundVariableAttributes(DATA *data, threadData_t *threadData);
extern int Load_functionInitialEquations(DATA *data, threadData_t *threadData);
extern int Load_functionInitialEquations_lambda0(DATA *data, threadData_t *threadData);
extern int Load_functionRemovedInitialEquations(DATA *data, threadData_t *threadData);
extern int Load_updateBoundParameters(DATA *data, threadData_t *threadData);
extern int Load_checkForAsserts(DATA *data, threadData_t *threadData);
extern int Load_function_ZeroCrossingsEquations(DATA *data, threadData_t *threadData);
extern int Load_function_ZeroCrossings(DATA *data, threadData_t *threadData, double* gout);
extern int Load_function_updateRelations(DATA *data, threadData_t *threadData, int evalZeroCross);
extern int Load_checkForDiscreteChanges(DATA *data, threadData_t *threadData);
extern const char* Load_zeroCrossingDescription(int i, int **out_EquationIndexes);
extern const char* Load_relationDescription(int i);
extern void Load_function_initSample(DATA *data, threadData_t *threadData);
extern int Load_initialAnalyticJacobianG(void* data, threadData_t *threadData);
extern int Load_initialAnalyticJacobianA(void* data, threadData_t *threadData);
extern int Load_initialAnalyticJacobianB(void* data, threadData_t *threadData);
extern int Load_initialAnalyticJacobianC(void* data, threadData_t *threadData);
extern int Load_initialAnalyticJacobianD(void* data, threadData_t *threadData);
extern int Load_functionJacG_column(void* data, threadData_t *threadData);
extern int Load_functionJacA_column(void* data, threadData_t *threadData);
extern int Load_functionJacB_column(void* data, threadData_t *threadData);
extern int Load_functionJacC_column(void* data, threadData_t *threadData);
extern int Load_functionJacD_column(void* data, threadData_t *threadData);
extern const char* Load_linear_model_frame(void);
extern const char* Load_linear_model_datarecovery_frame(void);
extern int Load_mayer(DATA* data, modelica_real** res, short *);
extern int Load_lagrange(DATA* data, modelica_real** res, short *, short *);
extern int Load_pickUpBoundsForInputsInOptimization(DATA* data, modelica_real* min, modelica_real* max, modelica_real*nominal, modelica_boolean *useNominal, char ** name, modelica_real * start, modelica_real * startTimeOpt);
extern int Load_setInputData(DATA *data, const modelica_boolean file);
extern int Load_getTimeGrid(DATA *data, modelica_integer * nsi, modelica_real**t);
extern void Load_function_initSynchronous(DATA * data, threadData_t *threadData);
extern void Load_function_updateSynchronous(DATA * data, threadData_t *threadData, long i);
extern int Load_function_equationsSynchronous(DATA * data, threadData_t *threadData, long i);
extern void Load_read_input_fmu(MODEL_DATA* modelData, SIMULATION_INFO* simulationData);
extern void Load_function_savePreSynchronous(DATA *data, threadData_t *threadData);
extern int Load_inputNames(DATA* data, char ** names);
extern int Load_initializeDAEmodeData(DATA *data, DAEMODE_DATA*);
extern int Load_functionLocalKnownVars(DATA*, threadData_t*);
extern int Load_symbolicInlineSystem(DATA*, threadData_t*);

#include "Load_literals.h"




#if defined(HPCOM) && !defined(_OPENMP)
  #error "HPCOM requires OpenMP or the results are wrong"
#endif
#if defined(_OPENMP)
  #include <omp.h>
#else
  /* dummy omp defines */
  #define omp_get_max_threads() 1
#endif

#endif

